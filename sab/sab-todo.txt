Something screwy caused by the use of CallNonGenericMethod in the
implementation, the atomics should be callable as functions, they
don't need a "this" and there should be no restriction on where they
are stored.  "this" should be ignored.

Proper initialization of the futexWaiters list.

Deallocation of global resources:
  - anything left on the futexWaiters list
  - the global lock in the Workers code

Important: Unblock and kill workers that are blocked on shutdown.

Misc OOM issues.

Representation of the worker token.  Again we should probably use an
abstract class, not void* (lots of wrist slapping).

Timed wait.

Dealing with the fact that a blocking worker must have exclusive
access to its implementation thread.  (But, once a worker gets a
thread it owns it until it is done, there is no multiplexing.  This is
probably no better or worse that if there were multiplexing.)

Related: only need to create the futexAPI for workers that will use
shared memory.



Low priority
------------

Implement futexRequeue.

Atomics abstraction for Visual Studio before VC2012.

Throw correct error for "bad thread" (with correct error message).

From: Lars T Hansen <lhansen@mozilla.com>

Experiments for uint32

diff --git a/js/src/jit-test/tests/atomics/inline-add2.js b/js/src/jit-test/tests/atomics/inline-add2.js
--- a/js/src/jit-test/tests/atomics/inline-add2.js
+++ b/js/src/jit-test/tests/atomics/inline-add2.js
@@ -8,22 +8,17 @@
 // MIR) that:
 //
 //  - the add operation is inlined as it should be
 //  - loads and stores are not moved across the add
 //
 // Be sure to run with --ion-offthread-compile=off.
 
 function add(ta) {
-    var x = ta[0];
-    var n = Atomics.add(ta, 86, 6);
-    var y = ta[1];
-    var z = y + 1.5;
-    var w = x + z;
-    return w + n;
+    return Atomics.add(ta, 86, 6) + 0.75;
 }
 
 if (!this.SharedArrayBuffer || !this.Atomics || !this.SharedUint32Array)
     quit(0);
 
 var sab = new SharedArrayBuffer(4096);
 var ia = new SharedUint32Array(sab);
 for ( var i=0, limit=ia.length ; i < limit ; i++ )
diff --git a/js/src/jit/IonMacroAssembler.cpp b/js/src/jit/IonMacroAssembler.cpp
--- a/js/src/jit/IonMacroAssembler.cpp
+++ b/js/src/jit/IonMacroAssembler.cpp
@@ -440,22 +440,27 @@ MacroAssembler::compareExchangeToTypedIn
         break;
     case Scalar::Uint16:
         compareExchange16ZeroExtend(mem, oldval, newval, output.gpr());
         break;
     case Scalar::Int32:
         compareExchange32(mem, oldval, newval, output.gpr());
         break;
     case Scalar::Uint32:
-        // At the moment, the code in MCallOptimize.cpp forces the output
-        // type to double for uint32 arrays.  For a subtler and more elaborate
-        // approach, see loadFromTypedArray().
-        JS_ASSERT(output.isFloat());
-        compareExchange32(mem, oldval, newval, temp);
-        convertUInt32ToDouble(temp, output.fpu());
+        if (output.isFloat()) {
+            compareExchange32(mem, oldval, newval, temp);
+            convertUInt32ToDouble(temp, output.fpu());
+        } else {
+            compareExchange32(mem, oldval, newval, output.gpr());
+
+            // Bail out if the value doesn't fit into a signed int32 value. This
+            // is what allows MCompareExchangeTypedArrayElement to have a type() of
+            // MIRType_Int32 for UInt32 array accesses.
+            branchTest32(Assembler::Signed, dest.gpr(), dest.gpr(), fail);
+        }
         break;
     default:
         MOZ_CRASH("Invalid typed array type");
     }
 }
 
 template void
 MacroAssembler::compareExchangeToTypedIntArray(Scalar::Type arrayType, const Address &mem,

From: Lars T Hansen <lhansen@mozilla.com>

Bug 1074237 - Support for worker suspension (futex API) within the DOM worker code

diff --git a/dom/base/nsJSEnvironment.cpp b/dom/base/nsJSEnvironment.cpp
--- a/dom/base/nsJSEnvironment.cpp
+++ b/dom/base/nsJSEnvironment.cpp
@@ -69,16 +69,17 @@
 #include "nsJSPrincipals.h"
 
 #ifdef XP_MACOSX
 // AssertMacros.h defines 'check' and conflicts with AccessCheck.h
 #undef check
 #endif
 #include "AccessCheck.h"
 
+#include "prinit.h"
 #include "prlog.h"
 #include "prthread.h"
 
 #include "mozilla/Preferences.h"
 #include "mozilla/Telemetry.h"
 #include "mozilla/dom/BindingUtils.h"
 #include "mozilla/Attributes.h"
 #include "mozilla/dom/asmjscache/AsmJSCache.h"
@@ -2680,16 +2681,169 @@ NS_DOMWriteStructuredClone(JSContext* cx
 void
 NS_DOMStructuredCloneError(JSContext* cx,
                            uint32_t errorid)
 {
   // We don't currently support any extensions to structured cloning.
   xpc::Throw(cx, NS_ERROR_DOM_DATA_CLONE_ERR);
 }
 
+// A global lock shared by all the condition vars for all the futexes,
+// and controlling access to all futex state.
+//
+// A finer grained lock is desirable but not yet an urgent concern.
+// Each finer-grained lock must be shared among all JSFutexAPIImpl
+// instances that might interact on any set of shared memory objects,
+// and at a minimum the lock would be tied to a domain, not a tab
+// (consider SharedWorker).
+
+static mozilla::Atomic<PRLock *, mozilla::SequentiallyConsistent> sFutexLock;
+static PRCallOnceType sFutexOnce;
+
+static PRStatus
+FutexLockInit()
+{
+  sFutexLock = PR_NewLock();
+  return sFutexLock ? PR_SUCCESS : PR_FAILURE;
+}
+
+JSFutexAPIImpl::~JSFutexAPIImpl()
+{
+  if (cond_)
+    PR_DestroyCondVar(cond_);
+}
+
+bool
+JSFutexAPIImpl::init()
+{
+  // Initialize lazily and not in EnsureStatics() because some workers
+  // are created before EnsureStatics() is called.
+  if (PR_CallOnce(&sFutexOnce, FutexLockInit) == PR_FAILURE || !sFutexLock)
+    return false;
+  cond_ = PR_NewCondVar(sFutexLock);
+  if (!cond_)
+    return false;
+  return true;
+}
+
+bool
+JSFutexAPIImpl::isOnWorkerThread()
+{
+  return threadType_ == WorkerThread;
+}
+
+JS::PerRuntimeFutexAPI::WakeResult
+JSFutexAPIImpl::wait(double timeout_ns)
+{
+  // Interrupts are implemented "manually" by setting a flag and
+  // unblocking any waiting thread.  Only worker threads can be
+  // interrupted.  "Interrupted_" is set and checked with the lock
+  // held.
+  //
+  // Once interrupted a worker stays interrupted.
+  //
+  // Errors in the condition-var layer are treated as interrupts, thus
+  // thread interrupts will be translated into futex interrupts.
+
+  if (interrupted_)
+    return InterruptForTerminate;
+
+  awoken_ = false;
+
+  // timeout_ns is an integer or Infinity, and never negative.  Note
+  // that a valid, finite timeout_ns may not fit in a uint32_t.
+
+  MOZ_ASSERT(timeout_ns >= 0);
+  MOZ_ASSERT(mozilla::IsInfinite(timeout_ns) || floor(timeout_ns) == timeout_ns);
+
+  if (mozilla::IsInfinite(timeout_ns)) {
+    while (!interrupted_ && !awoken_) {
+      if (PR_WaitCondVar(cond_, PR_INTERVAL_NO_TIMEOUT) == PR_FAILURE)
+        interrupted_ = true;
+    }
+    if (interrupted_)
+      return InterruptForTerminate;
+    return Woken;
+  }
+
+  // PRIntervalTime, which is the argument to WaitCondVar, is a
+  // uint32_t.  If ticks/sec is 1000000, which is its maximal possible
+  // value, then the longest time we can represent in an interval will
+  // be a little more than 4000 seconds.
+  //
+  // Upon return from the WaitCondVar we cannot tell from the return
+  // value whether the wait timed out or we were awoken (that problem
+  // is documented in prcvar.h); we must check to see if the interval
+  // might have expired, or check a status variable to see if we were
+  // awoken.
+  //
+  // For now just limit the timeout to 4000s.
+
+  double timeout_us = timeout_ns / 1000.0;
+
+  // FIXME: Need test cases for timeouts of various lengths.
+
+  if (timeout_us/1000.0 >= 4000000000.0)
+    return ErrorTooLong;
+
+  if (!interrupted_ && !awoken_) {
+    PRIntervalTime timeout = std::max(1U, PR_MicrosecondsToInterval((uint32_t)(timeout_us)));
+    PRIntervalTime start = PR_IntervalNow();
+    PRIntervalTime remaining = timeout;
+    PRIntervalTime before = start;
+    while (!interrupted_ && !awoken_) {
+      if (PR_WaitCondVar(cond_, remaining) == PR_FAILURE) {
+        interrupted_ = true;
+        break;
+      }
+      PRIntervalTime after = PR_IntervalNow();
+      if (after - start >= timeout)
+        break;
+      if (after - before >= remaining)
+        break;
+      remaining -= (after - before);
+      before = after;
+    }
+  }
+
+  if (interrupted_)
+    return InterruptForTerminate;
+  if (awoken_)
+    return Woken;
+  return Timedout;
+}
+
+void
+JSFutexAPIImpl::wake()
+{
+  awoken_ = true;
+  PR_NotifyCondVar(cond_);
+}
+
+void
+JSFutexAPIImpl::lock()
+{
+  PR_Lock(sFutexLock);
+}
+
+void
+JSFutexAPIImpl::interrupt()
+{
+  lock();
+  interrupted_ = true;
+  wake();
+  unlock();
+}
+
+void
+JSFutexAPIImpl::unlock()
+{
+  PR_Unlock(sFutexLock);
+}
+
 static bool
 AsmJSCacheOpenEntryForRead(JS::Handle<JSObject*> aGlobal,
                            const char16_t* aBegin,
                            const char16_t* aLimit,
                            size_t* aSize,
                            const uint8_t** aMemory,
                            intptr_t *aHandle)
 {
@@ -2737,16 +2891,26 @@ nsJSContext::EnsureStatics()
     MOZ_CRASH();
   }
 
   rv = sRuntimeService->GetRuntime(&sRuntime);
   if (NS_FAILED(rv)) {
     MOZ_CRASH();
   }
 
+  if (!JS::GetRuntimeFutexAPI(sRuntime)) {
+    JSFutexAPIImpl *fx = new JSFutexAPIImpl(JSFutexAPIImpl::MainThread);
+    if (fx) {
+      if (fx->init())
+        JS::SetRuntimeFutexAPI(sRuntime, fx);
+      else
+        delete fx;
+    }
+  }
+
   // Let's make sure that our main thread is the same as the xpcom main thread.
   MOZ_ASSERT(NS_IsMainThread());
 
   sPrevGCSliceCallback = JS::SetGCSliceCallback(sRuntime, DOMGCSliceCallback);
 
   // Set up the structured clone callbacks.
   static const JSStructuredCloneCallbacks cloneCallbacks = {
     NS_DOMReadStructuredClone,
diff --git a/dom/base/nsJSEnvironment.h b/dom/base/nsJSEnvironment.h
--- a/dom/base/nsJSEnvironment.h
+++ b/dom/base/nsJSEnvironment.h
@@ -4,16 +4,18 @@
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 #ifndef nsJSEnvironment_h
 #define nsJSEnvironment_h
 
 #include "nsIScriptContext.h"
 #include "nsIScriptGlobalObject.h"
 #include "nsCOMPtr.h"
 #include "nsIObserver.h"
+#include "prcvar.h"
+#include "prlock.h"
 #include "prtime.h"
 #include "nsCycleCollectionParticipant.h"
 #include "nsIXPConnect.h"
 #include "nsIArray.h"
 #include "mozilla/Attributes.h"
 #include "nsPIDOMWindow.h"
 #include "nsThreadUtils.h"
 #include "xpcpublic.h"
@@ -165,16 +167,48 @@ private:
   // context does. It is eventually collected by the cycle collector.
   nsCOMPtr<nsIScriptGlobalObject> mGlobalObjectRef;
 
   static void JSOptionChangedCallback(const char *pref, void *data);
 
   static bool DOMOperationCallback(JSContext *cx);
 };
 
+class JSFutexAPIImpl : public JS::PerRuntimeFutexAPI
+{
+public:
+  enum ThreadType {
+    MainThread,
+    WorkerThread
+  };
+
+  JSFutexAPIImpl(ThreadType threadType)
+  : cond_(nullptr),
+    interrupted_(false),
+    awoken_(false),
+    threadType_(threadType)
+  {
+  }
+  ~JSFutexAPIImpl();
+
+  bool init();
+  bool isOnWorkerThread();
+  WakeResult wait(double timeout);
+  void wake();
+  void lock();
+  void unlock();
+  void interrupt();
+
+private:
+  PRCondVar *cond_;
+  bool interrupted_;
+  bool awoken_;
+  ThreadType threadType_;
+};
+
 class nsIJSRuntimeService;
 class nsIPrincipal;
 class nsPIDOMWindow;
 
 namespace mozilla {
 namespace dom {
 
 void StartupJSEnvironment();
diff --git a/dom/workers/WorkerPrivate.cpp b/dom/workers/WorkerPrivate.cpp
--- a/dom/workers/WorkerPrivate.cpp
+++ b/dom/workers/WorkerPrivate.cpp
@@ -2435,16 +2435,34 @@ WorkerPrivateParent<Derived>::Start()
 
 // aCx is null when called from the finalizer
 template <class Derived>
 bool
 WorkerPrivateParent<Derived>::NotifyPrivate(JSContext* aCx, Status aStatus)
 {
   AssertIsOnParentThread();
 
+  if (aStatus == Canceling || aStatus == Killing || aStatus == Terminating) {
+    // Interrupt this worker: Wake it if it is blocked, and in any
+    // case set its interrupted flag to prevent the worker from
+    // blocking again.  The JS engine will abort the current script,
+    // if that script is blocking.
+    WorkerPrivate* wp = ParentAsWorkerPrivate();
+    JSContext* cx = wp->mJSContext;
+    if (cx) {
+      JSRuntime* rt = ::JS_GetRuntime(cx);
+      if (rt) {
+        JSFutexAPIImpl* fx = (JSFutexAPIImpl*)JS::GetRuntimeFutexAPI(rt);
+        if (fx) {
+          fx->interrupt();
+        }
+      }
+    }
+  }
+
   bool pending;
   {
     MutexAutoLock lock(mMutex);
 
     if (mParentStatus >= aStatus) {
       return true;
     }
 
@@ -4313,16 +4331,24 @@ WorkerPrivate::DoRunLoop(JSContext* aCx)
     MOZ_ASSERT(mStatus == Pending);
     mStatus = Running;
   }
 
   EnableMemoryReporter();
 
   InitializeGCTimers();
 
+  JSFutexAPIImpl *fx = new JSFutexAPIImpl(JSFutexAPIImpl::WorkerThread);
+  if (fx) {
+    if (fx->init())
+      JS::SetRuntimeFutexAPI(::JS_GetRuntime(aCx), fx);
+    else
+      delete fx;
+  }
+
   Maybe<JSAutoCompartment> workerCompartment;
 
   for (;;) {
     // Workers lazily create a global object in CompileScriptRunnable. We need
     // to enter the global's compartment as soon as it has been created.
     if (!workerCompartment && GlobalScope()) {
       workerCompartment.emplace(aCx, GlobalScope()->GetGlobalJSObject());
     }
diff --git a/dom/workers/test/futexInterrupt-worker.js b/dom/workers/test/futexInterrupt-worker.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/futexInterrupt-worker.js
@@ -0,0 +1,6 @@
+onmessage =
+    function (ev) {
+	var iab = new SharedInt32Array(ev.data);
+	Atomics.futexWait(iab, 0, 0, Number.POSITIVE_INFINITY);
+	console.log("THIS SHOULD NOT HAPPEN");
+    };
diff --git a/dom/workers/test/futexWakeOrRequeue_slave.js b/dom/workers/test/futexWakeOrRequeue_slave.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/futexWakeOrRequeue_slave.js
@@ -0,0 +1,33 @@
+// Testing futexWakeOrRequeue - worker.
+
+var id;			        // Identity
+var L;				// Next location to sleep on, incremented
+var M;				// Location to count in, constant
+var i32a;			// SharedInt32Array
+var numworkers;
+var iter;
+
+onmessage = 
+    function (ev) {
+	if (!ev.data)
+	    return;
+	var msg = ev.data;
+	id = msg.id;
+	L = msg.L;
+	M = msg.M;
+	var memory = msg.memory;
+	numworkers = msg.numworkers;
+	iter = msg.numiter;
+	i32a = new SharedInt32Array(memory);
+	console.log("Running " + id);
+	setTimeout(compute, 0);
+    };
+
+function compute() {
+    while (iter--) {
+	v = Atomics.futexWait(i32a, L, 0, Number.POSITIVE_INFINITY);
+	console.log("HI FROM WORKER " + id);
+	i32a[M]++;
+	L = (L+1) % numworkers;
+    }
+}
diff --git a/dom/workers/test/sharedMemCriticalSection_defs.js b/dom/workers/test/sharedMemCriticalSection_defs.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/sharedMemCriticalSection_defs.js
@@ -0,0 +1,17 @@
+// Parameters shared between the master and the workers.
+
+const doLock = true;		// Set to false to see what happens without mutual exclusion
+
+const mutexLoc = 0;
+const statusLoc = 1;
+const arrayExtra = 2;
+const arrayElements = 1000;
+const arrayLo = arrayExtra;
+const arrayLim = arrayLo + arrayElements;
+const iterations = 1000;	// Limit is 1023, for 10-bit fields
+const workers = 3;
+const maxPollAttempts = 100000;
+const pollTimeout = 10;
+
+// Polyfill, during development.
+if (!this.SharedInt32Array) this.SharedInt32Array = this.Int32Array;
diff --git a/dom/workers/test/sharedMemCriticalSection_master.js b/dom/workers/test/sharedMemCriticalSection_master.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/sharedMemCriticalSection_master.js
@@ -0,0 +1,88 @@
+// Testing mutual exclusion on SharedArrayBuffer - master worker.
+//
+// A shared buffer is allocated and shared between three workers.
+// Each worker treats the buffer as an int32 array, each element is
+// treated as three 10-bit fields.  Each time a worker enters the
+// critical section it increments its bitfield within each element.
+//
+// Each time the worker leaves the critical section it attempts to
+// yield the scheduler.
+//
+// At the end, all bit fields of all elements should have the number
+// of iterations executed.  (Otherwise, mutual exclusion was not
+// achieved.)
+//
+// We can observe failures by disabling locking, set doLock=false in
+// sharedMemCriticalSection_defs.js.
+
+importScripts("sharedMemCriticalSection_defs.js");
+
+var nbytes = 4*(arrayElements + arrayExtra) + 4095 & ~4095;
+var sab = new SharedArrayBuffer(nbytes);
+
+var sia = new SharedInt32Array(sab);
+sia[mutexLoc] = 0;
+sia[statusLoc] = 0;
+for ( var x=arrayLo ; x < arrayLim ; x++ )
+    sia[x] = 0;
+
+onmessage = function (ev) {
+    if (!ev.data)
+	return;
+    
+    postMessage("Creating workers");
+    var ws = [];
+    for ( var x=0 ; x < workers ; x++ ) {
+	var w = new Worker("sharedMemCriticalSection_slave.js");
+	w.onmessage =
+	    function (ev) {
+		self.postMessage(ev.data);
+	    };
+	ws.push(w);
+    }
+
+    postMessage("Starting workers");
+    for ( var w in ws )
+	ws[w].postMessage({id: w, sab: sab}, [sab]);
+
+    setTimeout(waitUntilDone, 0);
+}
+
+var attempts = 0;
+var laststat = -1;
+function waitUntilDone() {
+    var c = Atomics.load(sia, statusLoc);
+    if (c != laststat) {
+	postMessage("Master status = " + c);
+	laststat = c;
+    }
+    if (c != (1 << workers)-1) {
+	if (attempts++ > maxPollAttempts) {
+	    postMessage("Giving up - takes too long!");
+	    return;
+	}
+	setTimeout(waitUntilDone, pollTimeout);
+	return;
+    }
+
+    var correct = (iterations << 20) | (iterations << 10) | iterations;
+    var bogus = 0;
+    var numfail = 0;
+    for ( var x=arrayLo ; x < arrayLim ; x++ )
+	if (sia[x] != correct) {
+	    if (++bogus < 20)
+		postMessage("Incorrect @ " + x + ": expected " + correct + "; got " + sia[x]);
+	    numfail++;
+	}
+
+    if (numfail)
+	postMessage("FAILURE  Number of failures = " + numfail);
+    else {
+	postMessage("SUCCESS");
+	var n = sia[arrayLo];
+	for ( var i=0 ; i < workers ; i++ ) {
+	    postMessage("Worker " + i + ": " + (n & 1023).toString());
+	    n >>= 10;
+	}
+    }
+}
diff --git a/dom/workers/test/sharedMemCriticalSection_slave.js b/dom/workers/test/sharedMemCriticalSection_slave.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/sharedMemCriticalSection_slave.js
@@ -0,0 +1,48 @@
+// Testing mutual exclusion on SharedArrayBuffer - slave worker.
+//
+// Worker code:
+//
+// Each array element comprises 3 10-bit fields.  The final value of
+// each element should be (iter << 20) | (iter << 10) | iter, if
+// mutual exclusion works OK.
+//
+// To signal completion this one or's a bit into a bit vector at a
+// known location.  This is crude but it works.  There are other ways.
+
+importScripts("sharedMemCriticalSection_defs.js");
+importScripts("sharedMemSimpleMutex.js");
+
+var iter = 0;			// Global iteration counter
+
+var id;				// Worker identity (0..workers-1)
+var sia;			// SharedInt32Array
+var m;				// Mutex
+
+function compute() {
+    if (iter == iterations) {
+	postMessage("Finished: " + id);
+	Atomics.or(sia, statusLoc, 1 << id);
+	return;
+    }
+
+    iter++;
+    if (doLock)
+	m.lock();
+    for ( var x=arrayLo ; x < arrayLim ; x++ )
+	sia[x] += (1 << id*10);
+    if (doLock)
+	m.unlock();
+    setTimeout(compute, 1);	// relax
+}
+
+onmessage = function (ev) {
+    if (!ev.data)
+	return;
+
+    var msg = ev.data;
+    id = msg.id;
+    sia = new SharedInt32Array(msg.sab);
+    m = new Mutex(sia, mutexLoc);
+    postMessage("Starting: " + id);
+    setTimeout(compute, 0);
+}
diff --git a/dom/workers/test/sharedMemSimpleMutex.js b/dom/workers/test/sharedMemSimpleMutex.js
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/sharedMemSimpleMutex.js
@@ -0,0 +1,42 @@
+// Simple mutex semaphore abstraction.
+
+// The mutex code is based on http://www.akkadia.org/drepper/futex.pdf
+//
+// Mutex state values:
+//   0: unlocked
+//   1: locked with no waiters
+//   2: locked with possible waiters
+
+// "sab" must be a SharedInt32Array (mapped onto a SharedArrayBuffer).
+// "index" must be a valid index in sab, reserved for the mutex.
+// sab[index] must be initialized (globally) to 0 before the first mutex is created.
+
+function Mutex(sab, index) {
+    this.sab = sab;
+    this.index = index;
+}
+
+Mutex.prototype.lock =
+    function () {
+	const sab = this.sab;
+	const index = this.index;
+	var c;
+	if ((c = Atomics.compareExchange(sab, index, 0, 1)) != 0) {
+	    do {
+		if (c == 2 || Atomics.compareExchange(sab, index, 1, 2) != 0)
+		    Atomics.futexWait(sab, index, 2, Number.POSITIVE_INFINITY);
+	    } while ((c = Atomics.compareExchange(sab, index, 0, 2)) != 0);
+	}
+    };
+
+Mutex.prototype.unlock =
+    function () {
+	const sab = this.sab;
+	const index = this.index;
+	var v0 = Atomics.sub(sab, index, 1);
+	// Wake up a waiter if there are any
+	if (v0 != 1) {
+	    Atomics.store(sab, index, 0);
+	    Atomics.futexWake(sab, index, 1);
+	}
+    };
diff --git a/dom/workers/test/test_futexInterrupt.html b/dom/workers/test/test_futexInterrupt.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/test_futexInterrupt.html
@@ -0,0 +1,32 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<!-- Tests that futexes that are blocked will be interrupted and will
+not block the browser when the tab is closed or the browser is shut
+down.  -->
+<head>
+  <title>Tests that futexes can be interrupted on tab close or browser shutdown (see bug 1074237)</title>
+</head>
+
+<body>
+
+<script>
+var w = new Worker("futexInterrupt-worker.js");
+var iab = new SharedInt32Array(1);
+w.postMessage(iab.buffer, [iab.buffer]);
+</script>
+
+<p>
+Open this page in a debug build started with ./mach run.  It will
+create a worker that blocks indefinitely in futexWait().  Check the
+Web Console: there should be
+<b>no</b> message there that says "THIS SHOULD NOT HAPPEN".
+
+<p>Now try to close the browser!  If the code works as it should, the
+browser should close and you should see your shell's command prompt.
+
+</body>
+</html>
diff --git a/dom/workers/test/test_futexWakeOrRequeue.html b/dom/workers/test/test_futexWakeOrRequeue.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/test_futexWakeOrRequeue.html
@@ -0,0 +1,60 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<!--
+Tests the Atomics.futexWakeOrRequeue function (bug 1074237).
+-->
+<head>
+  <title>Tests the Atomics.futexWakeOrRequeue function (bug 1074237)</title>
+</head>
+
+<body>
+
+<p> The output from this test is all in the Web Console.  If
+everything goes OK there will eventually (after a few seconds) be a
+line that reads "DONE", and no lines that read "WRONG".
+
+<script>
+const memory = new SharedArrayBuffer(65536);
+const i32a = new SharedInt32Array(memory);
+const numiter = 2;
+const numworkers = 5;
+
+for ( var id=0 ; id < numworkers ; id++ ) {
+    var w = new Worker("futexWakeOrRequeue_slave.js");
+    w.postMessage({id:id, L:0, M:1000+id, memory:memory, numworkers:numworkers, numiter:numiter},
+		  [memory]);
+}
+console.log("Iter 0");
+setTimeout(compute, 1000);	// Let everyone get going
+
+// numiter * numworkers times, (numiter * numworkers / 10) seconds
+var iter = 0;
+var L = 0;
+function compute() {
+    if (iter == numiter) {
+	for ( var id=0 ; id < numworkers ; id++ )
+	    if (i32a[1000+id] != numiter)
+		console.log("WRONG: " + id + ": " + i32a[1000+id]);
+	console.log("DONE");
+	return;
+    }
+    var K = (L+1) % numworkers;
+    var v = Atomics.futexWakeOrRequeue(i32a, L, 1, 0, K);
+    if (v != 1)
+	console.log("WRONG: number woken: " + v + " @ " + iter + " " + L);
+    if (K == 0) {
+	++iter;
+	if (iter < numiter)
+	    console.log("Iter " + iter);
+    }
+    L = K;
+    setTimeout(compute, 1000);
+}
+</script>
+
+</body>
+</html>
diff --git a/dom/workers/test/test_sharedMemCriticalSection.html b/dom/workers/test/test_sharedMemCriticalSection.html
new file mode 100644
--- /dev/null
+++ b/dom/workers/test/test_sharedMemCriticalSection.html
@@ -0,0 +1,38 @@
+<!--
+  Any copyright is dedicated to the Public Domain.
+  http://creativecommons.org/publicdomain/zero/1.0/
+-->
+<!DOCTYPE HTML>
+<html>
+<!--
+Tests of mutual exclusion on SharedArrayBuffer using Atomics (bug 1074237).
+-->
+<head>
+  <title>Tests of mutual exclusion on SharedArrayBuffer using Atomics (bug 1074237)</title>
+</head>
+
+<body>
+
+<p>This usually takes 3-5 seconds</p>
+
+<div id="scrool">
+</div>
+
+<script>
+var w = new Worker("sharedMemCriticalSection_master.js");
+w.onmessage = 
+    function(event) {
+	var d = document.createElement('div');
+	d.appendChild(document.createTextNode(event.data));
+	document.getElementById("scrool").appendChild(d);
+	switch (event.data.substring(0,7)) {
+	case "FAILURE":
+	    break;
+	case "SUCCESS":
+	    break;
+	}
+    };
+w.postMessage("START");
+</script>
+</body>
+</html>

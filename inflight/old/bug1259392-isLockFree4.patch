# HG changeset patch
# User Lars T Hansen <lhansen@mozilla.com>
# Date 1458844949 -3600
#      Thu Mar 24 19:42:29 2016 +0100
# Node ID 313d2747bb33f60fba6e69a441c263fd2a2a6d12
# Parent  0827e0e5d9d46939407f1d2788849d405d0745aa
Bug 1259392 - nail down isLockFree(4) for good.  r=jolesen

diff --git a/js/src/jit-test/tests/atomics/basic-tests.js b/js/src/jit-test/tests/atomics/basic-tests.js
--- a/js/src/jit-test/tests/atomics/basic-tests.js
+++ b/js/src/jit-test/tests/atomics/basic-tests.js
@@ -375,17 +375,17 @@ function adHocExchange() {
     assertEq(exchangeLoop(a), -100000);
 }
 
 // isLockFree(n) may return true only if there is an integer array
 // on which atomic operations is allowed whose byte size is n,
 // ie, it must return false for n=8.
 //
 // SpiderMonkey has isLockFree(1), isLockFree(2), isLockFree(4) on all
-// supported platforms, though this is not guaranteed by the spec.
+// supported platforms, only the last is guaranteed by the spec.
 
 var sizes   = [    1,     2,     3,     4,     5,     6,     7,  8,
                    9,    10,    11,    12];
 var answers = [ true,  true, false,  true, false, false, false, false,
 	       false, false, false, false];
 
 function testIsLockFree() {
     // This ought to defeat most compile-time resolution.
diff --git a/js/src/jit/AtomicOperations.h b/js/src/jit/AtomicOperations.h
--- a/js/src/jit/AtomicOperations.h
+++ b/js/src/jit/AtomicOperations.h
@@ -294,18 +294,21 @@ class RegionLock
 
 inline bool
 AtomicOperations::isLockfree(int32_t size)
 {
     // Keep this in sync with visitAtomicIsLockFree() in jit/CodeGenerator.cpp.
 
     switch (size) {
       case 1:
+        return true;
       case 2:
+        return true;
       case 4:
+        // The spec requires Atomics.isLockFree(4) to return true.
         return true;
       case 8:
         // The spec requires Atomics.isLockFree(n) to return false
         // unless n is the BYTES_PER_ELEMENT value of some integer
         // TypedArray that admits atomic operations.  At the time of
         // writing (February 2016) there is no such array with n=8.
         // return AtomicOperations::isLockfree8();
         return false;
diff --git a/js/src/jit/CodeGenerator.cpp b/js/src/jit/CodeGenerator.cpp
--- a/js/src/jit/CodeGenerator.cpp
+++ b/js/src/jit/CodeGenerator.cpp
@@ -9976,17 +9976,20 @@ CodeGenerator::visitStoreTypedArrayEleme
 
 void
 CodeGenerator::visitAtomicIsLockFree(LAtomicIsLockFree* lir)
 {
     Register value = ToRegister(lir->value());
     Register output = ToRegister(lir->output());
 
     // Keep this in sync with isLockfree() in jit/AtomicOperations.h.
-    MOZ_ASSERT(!AtomicOperations::isLockfree(8));
+    MOZ_ASSERT(AtomicOperations::isLockfree(1));  // Implementation artifact
+    MOZ_ASSERT(AtomicOperations::isLockfree(2));  // Implementation artifact
+    MOZ_ASSERT(AtomicOperations::isLockfree(4));  // Spec requirement
+    MOZ_ASSERT(!AtomicOperations::isLockfree(8)); // Implementation invariant, for now
 
     Label Ldone, Lfailed;
     masm.move32(Imm32(1), output);
     masm.branch32(Assembler::Equal, value, Imm32(4), &Ldone);
     masm.branch32(Assembler::Equal, value, Imm32(2), &Ldone);
     masm.branch32(Assembler::Equal, value, Imm32(1), &Ldone);
     masm.move32(Imm32(0), output);
     masm.bind(&Ldone);

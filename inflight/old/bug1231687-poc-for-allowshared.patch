# HG changeset patch
# User Lars T Hansen <lhansen@mozilla.com>
# Date 1479218723 -3600
#      Tue Nov 15 15:05:23 2016 +0100
# Node ID 9020ab07db7e52270ac76c97b7af5ee6ca61dd4f
# Parent  5230f39d8f21270414aea3cdfb97914fc6acf4c1
Bug 1231687 - PoC [AllowShared] attribute on ArrayBuffer and ArrayBufferView, with suitable changes for WebGL 1.0 APIs

diff --git a/dom/bindings/Codegen.py b/dom/bindings/Codegen.py
--- a/dom/bindings/Codegen.py
+++ b/dom/bindings/Codegen.py
@@ -4347,16 +4347,17 @@ def getJSToNativeConversionInfo(type, de
                                 isDefinitelyObject=False,
                                 isMember=False,
                                 isOptional=False,
                                 invalidEnumValueFatal=True,
                                 defaultValue=None,
                                 treatNullAs="Default",
                                 isEnforceRange=False,
                                 isClamp=False,
+                                allowShared=False,
                                 isNullOrUndefined=False,
                                 exceptionCode=None,
                                 lenientFloatCode=None,
                                 allowTreatNonCallableAsNull=False,
                                 isCallbackReturnValue=False,
                                 sourceDescription="value",
                                 nestingLevel=""):
     """
@@ -4392,16 +4393,20 @@ def getJSToNativeConversionInfo(type, de
     If defaultValue is not None, it's the IDL default value for this conversion
 
     If isEnforceRange is true, we're converting an integer and throwing if the
     value is out of range.
 
     If isClamp is true, we're converting an integer and clamping if the
     value is out of range.
 
+    If allowShared is true an ArrayBufferView mapping shared memory is an
+    allowed value when the type is ArrayBufferView, otherwise we throw if
+    shared memory is seen.
+
     If lenientFloatCode is not None, it should be used in cases when
     we're a non-finite float that's not unrestricted.
 
     If allowTreatNonCallableAsNull is true, then [TreatNonCallableAsNull] and
     [TreatNonObjectAsNull] extended attributes on nullable callback functions
     will be honored.
 
     If isCallbackReturnValue is "JSImpl" or "Callback", then the declType may be
@@ -5425,25 +5430,42 @@ def getJSToNativeConversionInfo(type, de
         arrayType = CGGeneric(name)
         declType = arrayType
         if type.nullable():
             declType = CGTemplatedType("Nullable", declType)
             objRef = "${declName}.SetValue()"
         else:
             objRef = "${declName}"
 
+        # If the type is a possibly-nullable ArrayBufferView then generate a test
+        # against shared memory unless [AllowShared] is present.
+        sharedGuard = ""
+        sharedNullGuard = ""
+        if name == "ArrayBufferView" and not allowShared:
+            if type.nullable():
+                sharedNullGuard = "!${declName}.IsNull() && "
+            else:
+                sharedNullGuard = ""
+            sharedGuard = (
+            """
+            if (${sharedNullGuard}${objRef}.IsSharedArgumentTest()) {
+              return ThrowErrorMessage(cx, MSG_NOT_OBJECT, "Shared memory not allowed");
+            }
+            """)
+
         # Again, this is a bit strange since we are actually building a
         # template string here. ${objRef} and $*{badType} below are filled in
         # right now; $${val} expands to ${val}, to be filled in later.
         template = fill(
             """
             if (!${objRef}.Init(&$${val}.toObject())) {
               $*{badType}
             }
-            """,
+            """ + sharedGuard,
+            sharedNullGuard=sharedNullGuard,
             objRef=objRef,
             badType=onFailureBadType(failureCode, type.name).define())
         template = wrapObjectTemplate(template, type, "${declName}.SetNull();\n",
                                       failureCode)
         if not isMember:
             # This is a bit annoying.  In a union we don't want to have a
             # holder, since unions don't support that.  But if we're optional we
             # want to have a holder, so that the callee doesn't see
@@ -6131,16 +6153,17 @@ class CGArgumentConverter(CGThing):
             self.descriptorProvider,
             isOptional=(self.argcAndIndex is not None and
                         not self.argument.variadic),
             invalidEnumValueFatal=self.invalidEnumValueFatal,
             defaultValue=self.argument.defaultValue,
             treatNullAs=self.argument.treatNullAs,
             isEnforceRange=self.argument.enforceRange,
             isClamp=self.argument.clamp,
+            allowShared=self.argument.allowShared,
             lenientFloatCode=self.lenientFloatCode,
             isMember="Variadic" if self.argument.variadic else False,
             allowTreatNonCallableAsNull=self.argument.allowTreatNonCallableAsNull(),
             sourceDescription=self.argDescription)
 
         if not self.argument.variadic:
             return instantiateJSToNativeConversion(
                 typeConversion,
@@ -8226,16 +8249,17 @@ class FakeArgument():
         else:
             self.treatNullAs = "Default"
         if isinstance(interfaceMember, IDLAttribute):
             self.enforceRange = interfaceMember.enforceRange
             self.clamp = interfaceMember.clamp
         else:
             self.enforceRange = False
             self.clamp = False
+        self.allowShared = False
 
         self.identifier = FakeIdentifier(name)
 
     def allowTreatNonCallableAsNull(self):
         return self._allowTreatNonCallableAsNull
 
     def canHaveMissingValue(self):
         return False
diff --git a/dom/bindings/TypedArray.h b/dom/bindings/TypedArray.h
--- a/dom/bindings/TypedArray.h
+++ b/dom/bindings/TypedArray.h
@@ -55,17 +55,18 @@ private:
 /*
  * Various typed array classes for argument conversion.  We have a base class
  * that has a way of initializing a TypedArray from an existing typed array, and
  * a subclass of the base class that supports creation of a relevant typed array
  * or array buffer object.
  */
 template<typename T,
          JSObject* UnwrapArray(JSObject*),
-         void GetLengthAndDataAndSharedness(JSObject*, uint32_t*, bool*, T**)>
+         void GetLengthAndDataAndSharedness(JSObject*, uint32_t*, bool*, T**),
+         bool GetSharedness(JSObject*) >
 struct TypedArray_base : public TypedArrayObjectStorage {
   typedef T element_type;
 
   TypedArray_base()
     : mData(nullptr),
       mLength(0),
       mShared(false),
       mComputed(false)
@@ -145,16 +146,20 @@ public:
   // Finally, note that the buffer memory of a SharedArrayBuffer is
   // not detachable.
 
   inline bool IsShared() const {
     MOZ_ASSERT(mComputed);
     return mShared;
   }
 
+  inline bool IsSharedArgumentTest() const {
+    return GetSharedness(mTypedObj);
+  }
+
   inline T *Data() const {
     MOZ_ASSERT(mComputed);
     if (mShared)
       return nullptr;
     return mData;
   }
 
   inline T *DataAllowShared() const {
@@ -196,22 +201,25 @@ public:
 private:
   TypedArray_base(const TypedArray_base&) = delete;
 };
 
 template<typename T,
          JSObject* UnwrapArray(JSObject*),
          T* GetData(JSObject*, bool* isShared, const JS::AutoCheckCannotGC&),
          void GetLengthAndDataAndSharedness(JSObject*, uint32_t*, bool*, T**),
+         bool GetSharedness(JSObject*),
          JSObject* CreateNew(JSContext*, uint32_t)>
 struct TypedArray
-  : public TypedArray_base<T, UnwrapArray, GetLengthAndDataAndSharedness>
+  : public TypedArray_base<T, UnwrapArray, GetLengthAndDataAndSharedness,
+                           GetSharedness>
 {
 private:
-  typedef TypedArray_base<T, UnwrapArray, GetLengthAndDataAndSharedness> Base;
+  typedef TypedArray_base<T, UnwrapArray, GetLengthAndDataAndSharedness,
+                          GetSharedness> Base;
 
 public:
   TypedArray()
     : Base()
   {}
 
   TypedArray(TypedArray&& aOther)
     : Base(Move(aOther))
@@ -255,22 +263,25 @@ private:
   }
 
   TypedArray(const TypedArray&) = delete;
 };
 
 template<JSObject* UnwrapArray(JSObject*),
          void GetLengthAndDataAndSharedness(JSObject*, uint32_t*, bool*,
                                             uint8_t**),
+         bool GetSharedness(JSObject*),
          js::Scalar::Type GetViewType(JSObject*)>
 struct ArrayBufferView_base
-  : public TypedArray_base<uint8_t, UnwrapArray, GetLengthAndDataAndSharedness>
+  : public TypedArray_base<uint8_t, UnwrapArray, GetLengthAndDataAndSharedness,
+                           GetSharedness>
 {
 private:
-  typedef TypedArray_base<uint8_t, UnwrapArray, GetLengthAndDataAndSharedness>
+  typedef TypedArray_base<uint8_t, UnwrapArray, GetLengthAndDataAndSharedness,
+                          GetSharedness>
           Base;
 
 public:
   ArrayBufferView_base()
     : Base()
   {
   }
 
@@ -297,53 +308,71 @@ public:
 
   inline js::Scalar::Type Type() const
   {
     MOZ_ASSERT(this->inited());
     return mType;
   }
 };
 
+inline bool AlwaysFalseForJSObject(JSObject* obj) {
+  return false;
+}
+
+inline bool AlwaysTrueForJSObject(JSObject* obj) {
+  return true;
+}
+
 typedef TypedArray<int8_t, js::UnwrapInt8Array, JS_GetInt8ArrayData,
-                   js::GetInt8ArrayLengthAndData, JS_NewInt8Array>
+                   js::GetInt8ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewInt8Array>
         Int8Array;
 typedef TypedArray<uint8_t, js::UnwrapUint8Array, JS_GetUint8ArrayData,
-                   js::GetUint8ArrayLengthAndData, JS_NewUint8Array>
+                   js::GetUint8ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewUint8Array>
         Uint8Array;
 typedef TypedArray<uint8_t, js::UnwrapUint8ClampedArray, JS_GetUint8ClampedArrayData,
-                   js::GetUint8ClampedArrayLengthAndData, JS_NewUint8ClampedArray>
+                   js::GetUint8ClampedArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewUint8ClampedArray>
         Uint8ClampedArray;
 typedef TypedArray<int16_t, js::UnwrapInt16Array, JS_GetInt16ArrayData,
-                   js::GetInt16ArrayLengthAndData, JS_NewInt16Array>
+                   js::GetInt16ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewInt16Array>
         Int16Array;
 typedef TypedArray<uint16_t, js::UnwrapUint16Array, JS_GetUint16ArrayData,
-                   js::GetUint16ArrayLengthAndData, JS_NewUint16Array>
+                   js::GetUint16ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewUint16Array>
         Uint16Array;
 typedef TypedArray<int32_t, js::UnwrapInt32Array, JS_GetInt32ArrayData,
-                   js::GetInt32ArrayLengthAndData, JS_NewInt32Array>
+                   js::GetInt32ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewInt32Array>
         Int32Array;
 typedef TypedArray<uint32_t, js::UnwrapUint32Array, JS_GetUint32ArrayData,
-                   js::GetUint32ArrayLengthAndData, JS_NewUint32Array>
+                   js::GetUint32ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewUint32Array>
         Uint32Array;
 typedef TypedArray<float, js::UnwrapFloat32Array, JS_GetFloat32ArrayData,
-                   js::GetFloat32ArrayLengthAndData, JS_NewFloat32Array>
+                   js::GetFloat32ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewFloat32Array>
         Float32Array;
 typedef TypedArray<double, js::UnwrapFloat64Array, JS_GetFloat64ArrayData,
-                   js::GetFloat64ArrayLengthAndData, JS_NewFloat64Array>
+                   js::GetFloat64ArrayLengthAndData, JS_GetTypedArraySharedness,
+                   JS_NewFloat64Array>
         Float64Array;
 typedef ArrayBufferView_base<js::UnwrapArrayBufferView,
                              js::GetArrayBufferViewLengthAndData,
+                             JS_GetArrayBufferViewSharedness,
                              JS_GetArrayBufferViewType>
         ArrayBufferView;
 typedef TypedArray<uint8_t, js::UnwrapArrayBuffer, JS_GetArrayBufferData,
-                   js::GetArrayBufferLengthAndData, JS_NewArrayBuffer>
+                   js::GetArrayBufferLengthAndData, AlwaysFalseForJSObject, JS_NewArrayBuffer>
         ArrayBuffer;
 
 typedef TypedArray<uint8_t, js::UnwrapSharedArrayBuffer, JS_GetSharedArrayBufferData,
-                   js::GetSharedArrayBufferLengthAndData, JS_NewSharedArrayBuffer>
+                   js::GetSharedArrayBufferLengthAndData, AlwaysTrueForJSObject, JS_NewSharedArrayBuffer>
         SharedArrayBuffer;
 
 // A class for converting an nsTArray to a TypedArray
 // Note: A TypedArrayCreator must not outlive the nsTArray it was created from.
 //       So this is best used to pass from things that understand nsTArray to
 //       things that understand TypedArray, as with Promise::ArgumentToJSValue.
 template<typename TypedArrayType>
 class TypedArrayCreator
diff --git a/dom/bindings/parser/WebIDL.py b/dom/bindings/parser/WebIDL.py
--- a/dom/bindings/parser/WebIDL.py
+++ b/dom/bindings/parser/WebIDL.py
@@ -4272,16 +4272,17 @@ class IDLArgument(IDLObjectWithIdentifie
 
         self.optional = optional
         self.defaultValue = defaultValue
         self.variadic = variadic
         self.dictionaryMember = dictionaryMember
         self._isComplete = False
         self.enforceRange = False
         self.clamp = False
+        self.allowShared = False
         self._allowTreatNonCallableAsNull = False
         self._extendedAttrDict = {}
 
         assert not variadic or optional
         assert not variadic or not defaultValue
 
     def addExtendedAttributes(self, attrs):
         attrs = self.checkForStringHandlingExtendedAttributes(
@@ -4309,16 +4310,21 @@ class IDLArgument(IDLObjectWithIdentifie
             elif identifier == "TreatNonCallableAsNull":
                 self._allowTreatNonCallableAsNull = True
             elif (self.dictionaryMember and
                   (identifier == "ChromeOnly" or identifier == "Func")):
                 if not self.optional:
                     raise WebIDLError("[%s] must not be used on a required "
                                       "dictionary member" % identifier,
                                       [attribute.location])
+            elif identifier == "AllowShared":
+                if not attribute.noArguments():
+                    raise WebIDLError("[AllowShared] must take no arguments",
+                                      [attribute.location])
+                self.allowShared = True
             else:
                 raise WebIDLError("Unhandled extended attribute on %s" %
                                   ("a dictionary member" if self.dictionaryMember else
                                    "an argument"),
                                   [attribute.location])
             attrlist = attribute.listValue()
             self._extendedAttrDict[identifier] = attrlist if len(attrlist) else True
 
diff --git a/dom/crypto/CryptoBuffer.h b/dom/crypto/CryptoBuffer.h
--- a/dom/crypto/CryptoBuffer.h
+++ b/dom/crypto/CryptoBuffer.h
@@ -30,19 +30,20 @@ public:
   uint8_t* Assign(const ArrayBufferViewOrArrayBuffer& aData);
   uint8_t* Assign(const OwningArrayBufferViewOrArrayBuffer& aData);
 
   uint8_t* AppendSECItem(const SECItem* aItem);
   uint8_t* AppendSECItem(const SECItem& aItem);
 
   template<typename T,
            JSObject* UnwrapArray(JSObject*),
-           void GetLengthAndDataAndSharedness(JSObject*, uint32_t*, bool*, T**)>
+           void GetLengthAndDataAndSharedness(JSObject*, uint32_t*, bool*, T**),
+           bool GetSharedness(JSObject*)>
   uint8_t* Assign(const TypedArray_base<T, UnwrapArray,
-                                        GetLengthAndDataAndSharedness>& aArray)
+                                        GetLengthAndDataAndSharedness, GetSharedness>& aArray)
   {
     aArray.ComputeLengthAndData();
     return Assign(aArray.Data(), aArray.Length());
   }
 
   nsresult FromJwkBase64(const nsString& aBase64);
   nsresult ToJwkBase64(nsString& aBase64);
   bool ToSECItem(PLArenaPool* aArena, SECItem* aItem) const;
diff --git a/dom/webidl/WebGLRenderingContext.webidl b/dom/webidl/WebGLRenderingContext.webidl
--- a/dom/webidl/WebGLRenderingContext.webidl
+++ b/dom/webidl/WebGLRenderingContext.webidl
@@ -549,38 +549,38 @@ interface WebGLRenderingContext {
     void blendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
     void blendEquation(GLenum mode);
     void blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
     void blendFunc(GLenum sfactor, GLenum dfactor);
     void blendFuncSeparate(GLenum srcRGB, GLenum dstRGB,
                            GLenum srcAlpha, GLenum dstAlpha);
 
     void bufferData(GLenum target, GLsizeiptr size, GLenum usage);
-    void bufferData(GLenum target, ArrayBufferView data, GLenum usage);
+    void bufferData(GLenum target, [AllowShared] ArrayBufferView data, GLenum usage);
     void bufferData(GLenum target, ArrayBuffer? data, GLenum usage);
     void bufferData(GLenum target, SharedArrayBuffer data, GLenum usage);
-    void bufferSubData(GLenum target, GLintptr offset, ArrayBufferView data);
+    void bufferSubData(GLenum target, GLintptr offset, [AllowShared] ArrayBufferView data);
     void bufferSubData(GLenum target, GLintptr offset, ArrayBuffer? data);
     void bufferSubData(GLenum target, GLintptr offset, SharedArrayBuffer data);
 
     [WebGLHandlesContextLoss] GLenum checkFramebufferStatus(GLenum target);
     void clear(GLbitfield mask);
     void clearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
     void clearDepth(GLclampf depth);
     void clearStencil(GLint s);
     void colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
     void compileShader(WebGLShader? shader);
 
     void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat,
                               GLsizei width, GLsizei height, GLint border,
-                              ArrayBufferView data);
+                              [AllowShared] ArrayBufferView data);
     void compressedTexSubImage2D(GLenum target, GLint level,
                                  GLint xoffset, GLint yoffset,
                                  GLsizei width, GLsizei height, GLenum format,
-                                 ArrayBufferView data);
+                                 [AllowShared] ArrayBufferView data);
 
     void copyTexImage2D(GLenum target, GLint level, GLenum internalformat,
                         GLint x, GLint y, GLsizei width, GLsizei height,
                         GLint border);
     void copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                            GLint x, GLint y, GLsizei width, GLsizei height);
 
     WebGLBuffer? createBuffer();
@@ -673,17 +673,17 @@ interface WebGLRenderingContext {
     [WebGLHandlesContextLoss] GLboolean isTexture(WebGLTexture? texture);
     void lineWidth(GLfloat width);
     void linkProgram(WebGLProgram? program);
     void pixelStorei(GLenum pname, GLint param);
     void polygonOffset(GLfloat factor, GLfloat units);
 
     [Throws]
     void readPixels(GLint x, GLint y, GLsizei width, GLsizei height,
-                    GLenum format, GLenum type, ArrayBufferView? pixels);
+                    GLenum format, GLenum type, [AllowShared] ArrayBufferView? pixels);
 
     void renderbufferStorage(GLenum target, GLenum internalformat,
                              GLsizei width, GLsizei height);
     void sampleCoverage(GLclampf value, GLboolean invert);
     void scissor(GLint x, GLint y, GLsizei width, GLsizei height);
 
     void shaderSource(WebGLShader? shader, DOMString source);
 
@@ -694,17 +694,17 @@ interface WebGLRenderingContext {
     void stencilOp(GLenum fail, GLenum zfail, GLenum zpass);
     void stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
 
 
     // Overloads must share [Throws].
     [Throws] // Can't actually throw.
     void texImage2D(GLenum target, GLint level, GLenum internalformat,
                     GLsizei width, GLsizei height, GLint border, GLenum format,
-                    GLenum type, ArrayBufferView? pixels);
+                    GLenum type, [AllowShared] ArrayBufferView? pixels);
     [Throws] // Can't actually throw.
     void texImage2D(GLenum target, GLint level, GLenum internalformat,
                     GLenum format, GLenum type, ImageData pixels);
     [Throws]
     void texImage2D(GLenum target, GLint level, GLenum internalformat,
                     GLenum format, GLenum type, HTMLImageElement image); // May throw DOMException
     [Throws]
     void texImage2D(GLenum target, GLint level, GLenum internalformat,
@@ -714,17 +714,17 @@ interface WebGLRenderingContext {
                     GLenum format, GLenum type, HTMLVideoElement video); // May throw DOMException
 
     void texParameterf(GLenum target, GLenum pname, GLfloat param);
     void texParameteri(GLenum target, GLenum pname, GLint param);
 
     [Throws] // Can't actually throw.
     void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                        GLsizei width, GLsizei height, GLenum format, GLenum type,
-                       ArrayBufferView pixels);
+                       [AllowShared] ArrayBufferView pixels);
     [Throws] // Can't actually throw.
     void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                        GLenum format, GLenum type, ImageData pixels);
     [Throws]
     void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
                        GLenum format, GLenum type, HTMLImageElement image); // May throw DOMException
     [Throws]
     void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset,
diff --git a/js/src/jsfriendapi.h b/js/src/jsfriendapi.h
--- a/js/src/jsfriendapi.h
+++ b/js/src/jsfriendapi.h
@@ -1923,18 +1923,18 @@ JS_GetObjectAsArrayBuffer(JSObject* obj,
  *
  * |obj| must have passed a JS_IsArrayBufferView/JS_Is*Array test, or somehow
  * be known that it would pass such a test: it is an ArrayBufferView or a
  * wrapper of an ArrayBufferView, and the unwrapping will succeed.
  */
 extern JS_FRIEND_API(js::Scalar::Type)
 JS_GetArrayBufferViewType(JSObject* obj);
 
-extern JS_FRIEND_API(js::Scalar::Type)
-JS_GetSharedArrayBufferViewType(JSObject* obj);
+extern JS_FRIEND_API(bool)
+JS_GetArrayBufferViewSharedness(JSObject* obj);
 
 /*
  * Check whether obj supports the JS_GetArrayBuffer* APIs. Note that this may
  * return false if a security wrapper is encountered that denies the
  * unwrapping. If this test succeeds, then it is safe to call the various
  * accessor JSAPI calls defined below.
  */
 extern JS_FRIEND_API(bool)
diff --git a/js/src/vm/TypedArrayObject.cpp b/js/src/vm/TypedArrayObject.cpp
--- a/js/src/vm/TypedArrayObject.cpp
+++ b/js/src/vm/TypedArrayObject.cpp
@@ -3059,16 +3059,29 @@ JS_GetArrayBufferViewType(JSObject* obj)
 
     if (obj->is<TypedArrayObject>())
         return obj->as<TypedArrayObject>().type();
     if (obj->is<DataViewObject>())
         return Scalar::MaxTypedArrayViewType;
     MOZ_CRASH("invalid ArrayBufferView type");
 }
 
+JS_FRIEND_API(bool)
+JS_GetArrayBufferViewSharedness(JSObject* obj)
+{
+    obj = CheckedUnwrap(obj);
+    if (!obj)
+        return false;
+    if (obj->is<TypedArrayObject>())
+        return obj->as<TypedArrayObject>().isSharedMemory();
+    if (obj->is<DataViewObject>())
+        return false;
+    MOZ_CRASH("invalid ArrayBufferView type");
+}
+
 JS_FRIEND_API(int8_t*)
 JS_GetInt8ArrayData(JSObject* obj, bool* isSharedMemory, const JS::AutoCheckCannotGC&)
 {
     obj = CheckedUnwrap(obj);
     if (!obj)
         return nullptr;
     TypedArrayObject* tarr = &obj->as<TypedArrayObject>();
     MOZ_ASSERT((int32_t) tarr->type() == Scalar::Int8);

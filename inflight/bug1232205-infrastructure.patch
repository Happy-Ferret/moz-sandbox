# HG changeset patch
# User Lars T Hansen <lhansen@mozilla.com>
# Date 1461417816 -7200
#      Sat Apr 23 15:23:36 2016 +0200
# Node ID 206edb6bb5ae98d66bc7630eeefbc89f736bd75b
# Parent  9b3b0bd403b3acc969e23751e568a18d562eb8c9
Bug 1232205 - Wasm baseline: infrastructure

diff --git a/js/src/asmjs/Wasm.cpp b/js/src/asmjs/Wasm.cpp
--- a/js/src/asmjs/Wasm.cpp
+++ b/js/src/asmjs/Wasm.cpp
@@ -82,52 +82,54 @@ class ValidatorPolicy
 
     explicit ValidatorPolicy(JSContext* cx) : cx_(cx) {}
 };
 
 typedef WasmIterator<ValidatorPolicy> ValidateWasmIterator;
 
 class FunctionDecoder
 {
+    JSContext* cx_;
+    Decoder& d_;
     ValidateWasmIterator iter_;
     ModuleGeneratorThreadView mg_;
     uint32_t funcIndex_;
     const ValTypeVector& locals_;
 
   public:
     FunctionDecoder(JSContext* cx, Decoder& d, ModuleGeneratorThreadView mg,
                     uint32_t funcIndex, const ValTypeVector& locals)
-      : iter_(ValidatorPolicy(cx), d), mg_(mg), funcIndex_(funcIndex), locals_(locals)
+      : cx_(cx), d_(d), iter_(ValidatorPolicy(cx), d), mg_(mg), funcIndex_(funcIndex), locals_(locals)
     {}
     ValidateWasmIterator& iter() { return iter_; }
     ModuleGeneratorThreadView mg() const { return mg_; }
     const ValTypeVector& locals() const { return locals_; }
     const DeclaredSig& sig() const { return mg_.funcSig(funcIndex_); }
 
     bool checkI64Support() {
-#ifdef JS_CPU_X64
+#if defined(JS_CPU_X64) && !defined(JS_WASM_BASELINE_BOOTSTRAP)
         return true;
 #else
-        return fail("i64 NYI on this platform");
+        return Fail(cx_, d_, "i64 NYI on this platform");
 #endif
     }
 };
 
 } // end anonymous namespace
 
 static bool
 CheckValType(JSContext* cx, Decoder& d, ValType type)
 {
     switch (type) {
       case ValType::I32:
       case ValType::F32:
       case ValType::F64:
         return true;
       case ValType::I64:
-#ifndef JS_CPU_X64
+#if !defined(JS_CPU_X64) || defined(JS_WASM_BASELINE_BOOTSTRAP)
         return Fail(cx, d, "i64 NYI on this platform");
 #endif
         return true;
       default:
         // Note: it's important not to remove this default since readValType()
         // can return ValType values for which there is no enumerator.
         break;
     }
diff --git a/js/src/asmjs/WasmBaselineCompile.cpp b/js/src/asmjs/WasmBaselineCompile.cpp
new file mode 100644
--- /dev/null
+++ b/js/src/asmjs/WasmBaselineCompile.cpp
@@ -0,0 +1,27 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ * vim: set ts=8 sts=4 et sw=4 tw=99:
+ *
+ * Copyright 2015 Mozilla Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "asmjs/WasmBaselineCompile.h"
+
+bool
+wasm::BaselineCompileFunction(IonCompileTask* task)
+{
+    MOZ_ASSERT(task->mode() == IonCompileTask::CompileMode::Baseline);
+
+    MOZ_CRASH("NYI");
+}
diff --git a/js/src/asmjs/WasmBaselineCompile.h b/js/src/asmjs/WasmBaselineCompile.h
new file mode 100644
--- /dev/null
+++ b/js/src/asmjs/WasmBaselineCompile.h
@@ -0,0 +1,35 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 4 -*-
+ * vim: set ts=8 sts=4 et sw=4 tw=99:
+ *
+ * Copyright 2015 Mozilla Foundation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#ifndef asmjs_wasm_baseline_compile_h
+#define asmjs_wasm_baseline_compile_h
+
+#include "asmjs/WasmIonCompile.h"
+#include "asmjs/WasmBinary.h"
+#include "jit/MacroAssembler.h"
+
+namespace js {
+namespace wasm {
+
+bool
+BaselineCompileFunction(IonCompileTask* task);
+
+} // namespace wasm
+} // namespace js
+
+#endif // asmjs_wasm_ion_compile_h
diff --git a/js/src/asmjs/WasmGenerator.cpp b/js/src/asmjs/WasmGenerator.cpp
--- a/js/src/asmjs/WasmGenerator.cpp
+++ b/js/src/asmjs/WasmGenerator.cpp
@@ -806,24 +806,28 @@ ModuleGenerator::finishFuncDef(uint32_t 
                                           funcIndex,
                                           funcSig(funcIndex),
                                           fg->lineOrBytecode_,
                                           Move(fg->callSiteLineNums_),
                                           generateTime);
     if (!func)
         return false;
 
-    fg->task_->init(Move(func));
+#ifdef JS_WASM_BASELINE_BOOTSTRAP
+    fg->task_->init(Move(func), IonCompileTask::CompileMode::Baseline);
+#else
+    fg->task_->init(Move(func), IonCompileTask::CompileMode::Ion);
+#endif
 
     if (parallel_) {
         if (!StartOffThreadWasmCompile(cx_, fg->task_))
             return false;
         outstanding_++;
     } else {
-        if (!IonCompileFunction(fg->task_))
+        if (!CompileFunction(fg->task_))
             return false;
         if (!finishTask(fg->task_))
             return false;
     }
 
     fg->m_ = nullptr;
     fg->task_ = nullptr;
     activeFunc_ = nullptr;
diff --git a/js/src/asmjs/WasmIonCompile.cpp b/js/src/asmjs/WasmIonCompile.cpp
--- a/js/src/asmjs/WasmIonCompile.cpp
+++ b/js/src/asmjs/WasmIonCompile.cpp
@@ -13,16 +13,17 @@
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 
 #include "asmjs/WasmIonCompile.h"
 
+#include "asmjs/WasmBaselineCompile.h"
 #include "asmjs/WasmIterator.h"
 
 #include "jit/CodeGenerator.h"
 
 #include "mozilla/Poison.h"
 
 using namespace js;
 using namespace js::jit;
@@ -3093,16 +3094,18 @@ EmitExpr(FunctionCompiler& f)
     }
 
     MOZ_CRASH("unexpected wasm opcode");
 }
 
 bool
 wasm::IonCompileFunction(IonCompileTask* task)
 {
+    MOZ_ASSERT(task->mode() == IonCompileTask::CompileMode::Ion);
+
     int64_t before = PRMJ_Now();
 
     const FuncBytes& func = task->func();
     FuncCompileResults& results = task->results();
 
     Decoder d(func.bytes());
 
     // Build the local types vector.
@@ -3163,8 +3166,21 @@ wasm::IonCompileFunction(IonCompileTask*
         CodeGenerator codegen(&mir, lir, &results.masm());
         if (!codegen.generateAsmJS(&results.offsets()))
             return false;
     }
 
     results.setCompileTime((PRMJ_Now() - before) / PRMJ_USEC_PER_MSEC);
     return true;
 }
+
+bool
+wasm::CompileFunction(IonCompileTask* task)
+{
+    switch (task->mode()) {
+      case wasm::IonCompileTask::CompileMode::Ion:
+        return wasm::IonCompileFunction(task);
+      case wasm::IonCompileTask::CompileMode::Baseline:
+        return wasm::BaselineCompileFunction(task);
+      default:
+        MOZ_CRASH("Uninitialized task");
+    }
+}
diff --git a/js/src/asmjs/WasmIonCompile.h b/js/src/asmjs/WasmIonCompile.h
--- a/js/src/asmjs/WasmIonCompile.h
+++ b/js/src/asmjs/WasmIonCompile.h
@@ -103,58 +103,71 @@ class FuncCompileResults
 // IonCompileTask is filled with the wasm code to be compiled on the main
 // validation thread, sent off to an Ion compilation helper thread which creates
 // the FuncCompileResults, and finally sent back to the validation thread. To
 // save time allocating and freeing memory, IonCompileTasks are reset() and
 // reused.
 
 class IonCompileTask
 {
+  public:
+    enum class CompileMode { None, Baseline, Ion };
+
+  private:
     JSRuntime* const           runtime_;
     ModuleGeneratorThreadView  mg_;
     LifoAlloc                  lifo_;
     UniqueFuncBytes            func_;
+    CompileMode                mode_;
     Maybe<FuncCompileResults>  results_;
 
     IonCompileTask(const IonCompileTask&) = delete;
     IonCompileTask& operator=(const IonCompileTask&) = delete;
 
   public:
     IonCompileTask(JSRuntime* rt, ModuleGeneratorThreadView mg, size_t defaultChunkSize)
-      : runtime_(rt), mg_(mg), lifo_(defaultChunkSize), func_(nullptr)
+      : runtime_(rt), mg_(mg), lifo_(defaultChunkSize), func_(nullptr), mode_(CompileMode::None)
     {}
     JSRuntime* runtime() const {
         return runtime_;
     }
     LifoAlloc& lifo() {
         return lifo_;
     }
     ModuleGeneratorThreadView mg() const {
         return mg_;
     }
-    void init(UniqueFuncBytes func) {
+    void init(UniqueFuncBytes func, CompileMode mode) {
         MOZ_ASSERT(!func_);
         func_ = Move(func);
         results_.emplace(lifo_);
+        mode_ = mode;
+    }
+    CompileMode mode() const {
+        return mode_;
     }
     const FuncBytes& func() const {
         MOZ_ASSERT(func_);
         return *func_;
     }
     FuncCompileResults& results() {
         return *results_;
     }
     void reset(Bytes* recycled) {
         if (func_)
             *recycled = Move(func_->bytes());
         func_.reset(nullptr);
         results_.reset();
         lifo_.releaseAll();
+        mode_ = CompileMode::None;
     }
 };
 
 bool
 IonCompileFunction(IonCompileTask* task);
 
+bool
+CompileFunction(IonCompileTask* task);
+
 } // namespace wasm
 } // namespace js
 
 #endif // wasm_ion_compile_h
diff --git a/js/src/moz.build b/js/src/moz.build
--- a/js/src/moz.build
+++ b/js/src/moz.build
@@ -149,16 +149,17 @@ EXPORTS.js += [
     '../public/Value.h',
     '../public/Vector.h',
     '../public/WeakMapPtr.h',
 ]
 
 UNIFIED_SOURCES += [
     'asmjs/AsmJS.cpp',
     'asmjs/Wasm.cpp',
+    'asmjs/WasmBaselineCompile.cpp',
     'asmjs/WasmBinary.cpp',
     'asmjs/WasmBinaryToText.cpp',
     'asmjs/WasmFrameIterator.cpp',
     'asmjs/WasmGenerator.cpp',
     'asmjs/WasmIonCompile.cpp',
     'asmjs/WasmModule.cpp',
     'asmjs/WasmSignalHandlers.cpp',
     'asmjs/WasmStubs.cpp',
@@ -647,16 +648,18 @@ if CONFIG['NIGHTLY_BUILD']:
 if CONFIG['NIGHTLY_BUILD']:
     DEFINES['ENABLE_SIMD'] = True
 
 # Also set in shell/moz.build
 DEFINES['ENABLE_SHARED_ARRAY_BUFFER'] = True
 
 DEFINES['EXPORT_JS_API'] = True
 
+DEFINES['JS_WASM_BASELINE_BOOTSTRAP'] = True
+
 if CONFIG['JS_HAS_CTYPES']:
     DEFINES['JS_HAS_CTYPES'] = True
     for var in ('DLL_PREFIX', 'DLL_SUFFIX'):
         DEFINES[var] = '"%s"' % CONFIG[var]
 
 if CONFIG['MOZ_LINKER']:
     DEFINES['MOZ_LINKER'] = True
 
diff --git a/js/src/vm/HelperThreads.cpp b/js/src/vm/HelperThreads.cpp
--- a/js/src/vm/HelperThreads.cpp
+++ b/js/src/vm/HelperThreads.cpp
@@ -1357,17 +1357,17 @@ HelperThread::handleWasmWorkload()
 
     currentTask.emplace(HelperThreadState().wasmWorklist().popCopy());
     bool success = false;
 
     wasm::IonCompileTask* task = wasmTask();
     {
         AutoUnlockHelperThreadState unlock;
         PerThreadData::AutoEnterRuntime enter(threadData.ptr(), task->runtime());
-        success = wasm::IonCompileFunction(task);
+        success = wasm::CompileFunction(task);
     }
 
     // On success, try to move work to the finished list.
     if (success)
         success = HelperThreadState().wasmFinishedList().append(task);
 
     // On failure, note the failure for harvesting by the parent.
     if (!success)

# HG changeset patch
# User Lars T Hansen <lhansen@mozilla.com>
# Date 1447685376 -3600
#      Mon Nov 16 15:49:36 2015 +0100
# Node ID 6a36017a23bd6b7c6b9858b2bf9156b4ac645070
# Parent  17b4fc1656e7021f1c79b6402b55ea6e679b8c07
Bug 1225040 - generalize jsapi-tests for SAB

diff --git a/js/src/jsapi-tests/testTypedArrays.cpp b/js/src/jsapi-tests/testTypedArrays.cpp
--- a/js/src/jsapi-tests/testTypedArrays.cpp
+++ b/js/src/jsapi-tests/testTypedArrays.cpp
@@ -38,29 +38,43 @@ BEGIN_TEST(testTypedArrays)
         JS::AutoCheckCannotGC nogc;
         bool isShared;
         CHECK_EQUAL(JS_GetArrayBufferByteLength(buffer), nbytes);
         memset(JS_GetArrayBufferData(buffer, &isShared, nogc), 1, nbytes);
         MOZ_ASSERT(!isShared);  // Because ArrayBuffer
     }
 
     ok = ok &&
-        TestArrayFromBuffer<JS_NewInt8ArrayWithBuffer, JS_NewInt8ArrayFromArray, int8_t, JS_GetInt8ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewUint8ArrayWithBuffer, JS_NewUint8ArrayFromArray, uint8_t, JS_GetUint8ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewUint8ClampedArrayWithBuffer, JS_NewUint8ClampedArrayFromArray, uint8_t, JS_GetUint8ClampedArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewInt16ArrayWithBuffer, JS_NewInt16ArrayFromArray, int16_t, JS_GetInt16ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewUint16ArrayWithBuffer, JS_NewUint16ArrayFromArray, uint16_t, JS_GetUint16ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewInt32ArrayWithBuffer, JS_NewInt32ArrayFromArray, int32_t, JS_GetInt32ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewUint32ArrayWithBuffer, JS_NewUint32ArrayFromArray, uint32_t, JS_GetUint32ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewFloat32ArrayWithBuffer, JS_NewFloat32ArrayFromArray, float, JS_GetFloat32ArrayData>(cx) &&
-        TestArrayFromBuffer<JS_NewFloat64ArrayWithBuffer, JS_NewFloat64ArrayFromArray, double, JS_GetFloat64ArrayData>(cx);
+        TestArrayFromBuffer<JS_NewInt8ArrayWithBuffer, JS_NewInt8ArrayFromArray, int8_t, false, JS_GetInt8ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint8ArrayWithBuffer, JS_NewUint8ArrayFromArray, uint8_t, false, JS_GetUint8ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint8ClampedArrayWithBuffer, JS_NewUint8ClampedArrayFromArray, uint8_t, false, JS_GetUint8ClampedArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewInt16ArrayWithBuffer, JS_NewInt16ArrayFromArray, int16_t, false, JS_GetInt16ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint16ArrayWithBuffer, JS_NewUint16ArrayFromArray, uint16_t, false, JS_GetUint16ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewInt32ArrayWithBuffer, JS_NewInt32ArrayFromArray, int32_t, false, JS_GetInt32ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint32ArrayWithBuffer, JS_NewUint32ArrayFromArray, uint32_t, false, JS_GetUint32ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewFloat32ArrayWithBuffer, JS_NewFloat32ArrayFromArray, float, false, JS_GetFloat32ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewFloat64ArrayWithBuffer, JS_NewFloat64ArrayFromArray, double, false, JS_GetFloat64ArrayData>(cx);
+
+    ok = ok &&
+        TestArrayFromBuffer<JS_NewInt8ArrayWithBuffer, JS_NewInt8ArrayFromArray, int8_t, true, JS_GetInt8ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint8ArrayWithBuffer, JS_NewUint8ArrayFromArray, uint8_t, true, JS_GetUint8ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint8ClampedArrayWithBuffer, JS_NewUint8ClampedArrayFromArray, uint8_t, true, JS_GetUint8ClampedArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewInt16ArrayWithBuffer, JS_NewInt16ArrayFromArray, int16_t, true, JS_GetInt16ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint16ArrayWithBuffer, JS_NewUint16ArrayFromArray, uint16_t, true, JS_GetUint16ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewInt32ArrayWithBuffer, JS_NewInt32ArrayFromArray, int32_t, true, JS_GetInt32ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewUint32ArrayWithBuffer, JS_NewUint32ArrayFromArray, uint32_t, true, JS_GetUint32ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewFloat32ArrayWithBuffer, JS_NewFloat32ArrayFromArray, float, true, JS_GetFloat32ArrayData>(cx) &&
+        TestArrayFromBuffer<JS_NewFloat64ArrayWithBuffer, JS_NewFloat64ArrayFromArray, double, true, JS_GetFloat64ArrayData>(cx);
 
     return ok;
 }
 
+// Shared memory can only be mapped by a TypedArray by creating the TypedArray with
+// a SharedArrayBuffer explicitly, so no tests here.
+
 template<JSObject* Create(JSContext*, uint32_t),
          typename Element,
          Element* GetData(JSObject*, bool* isShared, const JS::AutoCheckCannotGC&)>
 bool
 TestPlainTypedArray(JSContext* cx)
 {
     {
         RootedObject notArray(cx, Create(cx, UINT32_MAX));
@@ -90,54 +104,61 @@ TestPlainTypedArray(JSContext* cx)
     CHECK_SAME(v, Int32Value(13));
 
     return true;
 }
 
 template<JSObject* CreateWithBuffer(JSContext*, JS::HandleObject, uint32_t, int32_t),
          JSObject* CreateFromArray(JSContext*, JS::HandleObject),
          typename Element,
+         bool Shared,
          Element* GetData(JSObject*, bool*, const JS::AutoCheckCannotGC&)>
 bool
 TestArrayFromBuffer(JSContext* cx)
 {
     size_t elts = 8;
     size_t nbytes = elts * sizeof(Element);
-    RootedObject buffer(cx, JS_NewArrayBuffer(cx, nbytes));
+    RootedObject buffer(cx, Shared ? JS_NewSharedArrayBuffer(cx, nbytes) : JS_NewArrayBuffer(cx, nbytes));
     {
         JS::AutoCheckCannotGC nogc;
         bool isShared;
-        memset(JS_GetArrayBufferData(buffer, &isShared, nogc), 1, nbytes);
-        MOZ_ASSERT(!isShared);  // Because ArrayBuffer
+        void* data = Shared ? JS_GetSharedArrayBufferData(buffer, &isShared, nogc)
+            : JS_GetArrayBufferData(buffer, &isShared, nogc);
+        MOZ_ASSERT(Shared == isShared);
+        memset(data, 1, nbytes);
     }
 
     {
         RootedObject notArray(cx, CreateWithBuffer(cx, buffer, UINT32_MAX, -1));
         CHECK(!notArray);
     }
 
     RootedObject array(cx, CreateWithBuffer(cx, buffer, 0, -1));
     CHECK_EQUAL(JS_GetTypedArrayLength(array), elts);
     CHECK_EQUAL(JS_GetTypedArrayByteOffset(array), 0u);
     CHECK_EQUAL(JS_GetTypedArrayByteLength(array), nbytes);
     {
         bool isShared;
         CHECK_EQUAL(JS_GetArrayBufferViewBuffer(cx, array, &isShared), (JSObject*) buffer);
+        MOZ_ASSERT(Shared == isShared);
     }
 
     {
         JS::AutoCheckCannotGC nogc;
         Element* data;
         bool isShared;
+
         CHECK(data = GetData(array, &isShared, nogc));
-        CHECK_EQUAL((void*) data, (void*) JS_GetArrayBufferData(buffer, &isShared, nogc));
-        MOZ_ASSERT(!isShared);  // Because ArrayBuffer
+        MOZ_ASSERT(Shared == isShared);
 
-        CHECK_EQUAL(*reinterpret_cast<uint8_t*>(JS_GetArrayBufferData(buffer, &isShared, nogc)), 1u);
-        MOZ_ASSERT(!isShared);  // Because ArrayBuffer
+        CHECK_EQUAL((void*) data,
+                    Shared ? (void*) JS_GetSharedArrayBufferData(buffer, &isShared, nogc)
+                    : (void*) JS_GetArrayBufferData(buffer, &isShared, nogc));
+        MOZ_ASSERT(Shared == isShared);
+
         CHECK_EQUAL(*reinterpret_cast<uint8_t*>(data), 1u);
     }
 
     RootedObject shortArray(cx, CreateWithBuffer(cx, buffer, 0, elts / 2));
     CHECK_EQUAL(JS_GetTypedArrayLength(shortArray), elts / 2);
     CHECK_EQUAL(JS_GetTypedArrayByteOffset(shortArray), 0u);
     CHECK_EQUAL(JS_GetTypedArrayByteLength(shortArray), nbytes / 2);
 
@@ -154,47 +175,47 @@ TestArrayFromBuffer(JSContext* cx)
     CHECK_SAME(v, v2);
     CHECK(JS_GetElement(cx, shortArray, 0, &v2));
     CHECK_SAME(v, v2);
     {
         JS::AutoCheckCannotGC nogc;
         Element* data;
         bool isShared;
         CHECK(data = GetData(array, &isShared, nogc));
-        MOZ_ASSERT(!isShared);  // Because ArrayBuffer
+        MOZ_ASSERT(Shared == isShared);
         CHECK_EQUAL(long(v.toInt32()), long(reinterpret_cast<Element*>(data)[0]));
     }
 
     v.setInt32(40);
     JS_SetElement(cx, array, elts / 2, v);
     CHECK(JS_GetElement(cx, array, elts / 2, &v2));
     CHECK_SAME(v, v2);
     CHECK(JS_GetElement(cx, ofsArray, 0, &v2));
     CHECK_SAME(v, v2);
     {
         JS::AutoCheckCannotGC nogc;
         Element* data;
         bool isShared;
         CHECK(data = GetData(array, &isShared, nogc));
-        MOZ_ASSERT(!isShared);  // Because ArrayBuffer
+        MOZ_ASSERT(Shared == isShared);
         CHECK_EQUAL(long(v.toInt32()), long(reinterpret_cast<Element*>(data)[elts / 2]));
     }
 
     v.setInt32(41);
     JS_SetElement(cx, array, elts - 1, v);
     CHECK(JS_GetElement(cx, array, elts - 1, &v2));
     CHECK_SAME(v, v2);
     CHECK(JS_GetElement(cx, ofsArray, elts / 2 - 1, &v2));
     CHECK_SAME(v, v2);
     {
         JS::AutoCheckCannotGC nogc;
         Element* data;
         bool isShared;
         CHECK(data = GetData(array, &isShared, nogc));
-        MOZ_ASSERT(!isShared);  // Because ArrayBuffer
+        MOZ_ASSERT(Shared == isShared);
         CHECK_EQUAL(long(v.toInt32()), long(reinterpret_cast<Element*>(data)[elts - 1]));
     }
 
     JS::RootedObject copy(cx, CreateFromArray(cx, array));
     CHECK(JS_GetElement(cx, array, 0, &v));
     CHECK(JS_GetElement(cx, copy, 0, &v2));
     CHECK_SAME(v, v2);
 
